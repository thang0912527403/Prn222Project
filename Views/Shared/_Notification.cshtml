@using Prn222Project.ViewModels
@model Notification

<div id="notificationContainer" class="fixed top-4 right-4 z-50 space-y-2 max-w-sm w-full"></div>

@if (Model != null && !string.IsNullOrEmpty(Model.Status) && !string.IsNullOrEmpty(Model.Message))
{
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const status = "@Model.Status";
            const message = `@Model.Message`;

            const titleMap = {
                success: "Thành công!",
                error: "Lỗi!",
                warning: "Cảnh báo!",
                info: "Thông tin"
            };

            const title = titleMap[status] || "Thông báo";

            showNotification(status, title, message);
        });

        let notificationId = 0;

        function showNotification(type, title, message, duration = 5000) {
            const container = document.getElementById('notificationContainer');
            const id = `notification-${notificationId++}`;

            const notification = document.createElement('div');
            notification.id = id;
            notification.className = `transform transition-all duration-300 ease-in-out translate-x-full opacity-0`;

            let bgColor, borderColor, iconColor, icon;
            switch (type) {
                case 'success':
                    bgColor = 'bg-green-50'; borderColor = 'border-green-200'; iconColor = 'text-green-500'; icon = '✓'; break;
                case 'error':
                    bgColor = 'bg-red-50'; borderColor = 'border-red-200'; iconColor = 'text-red-500'; icon = '✕'; break;
                case 'warning':
                    bgColor = 'bg-yellow-50'; borderColor = 'border-yellow-200'; iconColor = 'text-yellow-500'; icon = '⚠'; break;
                case 'info':
                    bgColor = 'bg-blue-50'; borderColor = 'border-blue-200'; iconColor = 'text-blue-500'; icon = 'ℹ'; break;
                default:
                    bgColor = 'bg-gray-50'; borderColor = 'border-gray-200'; iconColor = 'text-gray-500'; icon = '●';
            }

            notification.innerHTML = `
                <div class="max-w-sm w-full ${bgColor} border ${borderColor} rounded-lg shadow-lg p-4 relative">
                    <div class="flex items-start">
                        <div class="flex-shrink-0">
                            <span class="${iconColor} text-lg font-bold">${icon}</span>
                        </div>
                        <div class="ml-3 flex-1">
                            <h3 class="text-sm font-medium text-gray-900">${title}</h3>
                            <p class="mt-1 text-sm text-gray-600">${message}</p>
                        </div>
                        <div class="ml-4 flex-shrink-0 flex">
                            <button onclick="closeNotification('${id}')" class="bg-white rounded-md inline-flex text-gray-400 hover:text-gray-500">
                                <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                                </svg>
                            </button>
                        </div>
                    </div>
                    <div class="mt-3 bg-gray-200 rounded-full h-1">
                        <div class="bg-current h-1 rounded-full transition-all duration-linear ${iconColor}"
                            style="width: 100%; animation: shrink ${duration}ms linear forwards;"></div>
                    </div>
                </div>
            `;

            container.appendChild(notification);
            setTimeout(() => {
                notification.classList.remove('translate-x-full', 'opacity-0');
                notification.classList.add('translate-x-0', 'opacity-100');
            }, 10);

            setTimeout(() => { closeNotification(id); }, duration);
        }

        function closeNotification(id) {
            const el = document.getElementById(id);
            if (el) {
                el.classList.add('translate-x-full', 'opacity-0');
                el.classList.remove('translate-x-0', 'opacity-100');
                setTimeout(() => el?.remove(), 300);
            }
        }
    </script>

    <style>
        @@keyframes shrink {
            from {
                width: 100%;
            }

            to {
                width: 0%;
            }
        }
    </style>
}
